{"version":3,"file":"static/js/151.b46f1d9a.chunk.js","mappings":"sNAMaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASA,QAAnB,EAEtBC,EAAoB,SAAAF,GAAK,OAAIA,EAAMC,SAASE,MAAnB,E,uCCFzBC,EAAS,WACpB,IAAMD,GAASE,EAAAA,EAAAA,IAAYH,GACrBI,GAAWC,EAAAA,EAAAA,MAEjB,OACE,UAAC,KAAD,CACEC,GAAG,MACHC,SAAS,OACTC,WAAW,sBACXC,WAAW,MAJb,WAME,SAAC,IAAD,CACEH,GAAG,MACHI,QAAQ,SACRC,QAAQ,OACRC,cAAc,SACdC,WAAW,SACXC,IAAI,MACJP,SAAS,OACTC,WAAW,sBACXC,WAAW,MATb,oCAaA,SAAC,EAAAM,EAAD,CACET,GAAG,QACHU,KAAK,SACLC,KAAK,OACLC,GAAG,SACHC,MAAOlB,EACPmB,SAAU,SAAAC,GAAC,OAAIjB,GAASkB,EAAAA,EAAAA,IAASD,EAAEE,cAAcJ,OAAtC,EACXK,YAAY,eACZC,YAAY,UACZC,WAAY,CACV,sCACA,mCACA,wCAEFC,QAAQ,OACRC,EAAE,YAIT,E,4DClCKC,GAASC,EAAAA,EAAAA,IAAe,mBAAoB,IAM5CC,EAASC,EAAAA,KAAaC,MAAM,CAChCjB,KAAMgB,EAAAA,KAEHE,QALY,wHAOX,0IAEDC,WACHC,OAAQJ,EAAAA,KAELE,QAbH,6EAeI,gGAEDC,aAGCE,EAAgB,CACpBnB,GAAI,GACJF,KAAM,GACNoB,OAAQ,IAGGE,EAAc,WACzB,IAAMlC,GAAWC,EAAAA,EAAAA,MACXN,GAAWI,EAAAA,EAAAA,IAAYN,GAC9B0C,QAAQC,IAAIzC,GAgBX,OACE,SAAC,KAAD,CACE0C,cAAeJ,EACfK,iBAAkBX,EAClBY,SAlBgB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACvBC,EAAa,CACjB5B,GAAI,MAAQW,IACZb,KAAM4B,EAAO5B,KACboB,OAAQQ,EAAOR,QAGjB,GAAIrC,EAASgD,MAAK,SAAAC,GAAO,OAAIA,EAAQhC,OAAS8B,EAAW9B,IAAhC,IACvB,OAAOiC,MAAM,WAAD,OAAYH,EAAW9B,KAAvB,mCAEdZ,GAAS8C,EAAAA,EAAAA,IAAWJ,IACpBD,GACD,EAGC,UAKE,UAAC,KAAD,CACEvC,GAAI6C,EAAAA,GACJxC,QAAQ,OACRC,cAAc,SACdC,WAAW,SACXC,IAAI,MALN,WAOE,UAAC,IAAD,CACEJ,QAAQ,OACRC,QAAQ,OACRC,cAAc,SACdC,WAAW,SACXC,IAAI,MACJP,SAAS,OACTC,WAAW,sBACXC,WAAW,MARb,kBAWE,SAAC,EAAAM,EAAD,CACET,GAAI8C,EAAAA,GACJnC,KAAK,OACLD,KAAK,OACLE,GAAG,OACHM,YAAY,OACZC,YAAY,UACZC,WAAY,CACV,sCACA,mCACA,wCAEFE,EAAE,WAEJ,SAAC,KAAD,CACEtB,GAAI+C,EAAAA,GACJC,MAAM,UACNtC,KAAK,OACLuC,UAAU,YAGd,UAAC,IAAD,CACE7C,QAAQ,SACRC,QAAQ,OACRC,cAAc,SACdC,WAAW,SACXC,IAAI,MACJP,SAAS,OACTC,WAAW,sBACXC,WAAW,MARb,oBAWE,SAAC,EAAAM,EAAD,CACET,GAAI8C,EAAAA,GACJlC,GAAG,SACHD,KAAK,MACLD,KAAK,SACLwC,QAAQ,yFACRC,MAAM,+FACNjC,YAAY,eACZC,YAAY,UACZC,WAAY,CACV,sCACA,mCACA,wCAEFE,EAAE,WAEJ,SAAC,KAAD,CACEtB,GAAI+C,EAAAA,GACJC,MAAM,SACNtC,KAAK,SACLuC,UAAU,YAGd,SAAC,IAAD,CACEjD,GAAG,SACHW,KAAK,SACLyC,OAAO,MACPjC,YAAY,UACZlB,SAAS,OACTmB,WAAY,CACV,sCACA,mCACA,wCAEFiC,KAAK,KACLC,GAAG,OACHC,OAAQ,CACNC,GAAI,aACJR,MAAO,aACPI,OAAQ,MACRjC,YAAa,WAjBjB,6BAyBP,E,UChKYsC,EAAU,SAAC,GAA0B,IAAxB7C,EAAuB,EAAvBA,GAAIF,EAAmB,EAAnBA,KAAMoB,EAAa,EAAbA,OAC5BhC,GAAWC,EAAAA,EAAAA,MACjB,OACE,UAAC,IAAD,CACEC,GAAG,KAEHC,SAAS,OACTC,WAAW,sBACXC,WAAW,MACXuD,GAAG,OACHrD,QAAQ,OACRsD,eAAe,gBARjB,UAUGjD,EAVH,KAUS,SAAC,IAAD,CAAMV,GAAG,OAAT,SAAiB8B,KACxB,SAAC,IAAD,CACE9B,GAAG,SACHW,KAAK,SACLiD,QAAS,kBAAM9D,GAAS+D,EAAAA,EAAAA,IAAcjD,GAA7B,EACTwC,OAAO,MACPU,aAAa,MACb3C,YAAY,UACZlB,SAAS,OACTmB,WAAY,CACV,sCACA,mCACA,wCAEFiC,KAAK,KACLU,GAAG,MACHR,OAAQ,CACNS,WAAY,aACZhB,MAAO,aACPI,OAAQ,MACRjC,YAAa,WAnBjB,sBATKP,EAmCV,E,UCtCYqD,EAAc,WACzB,IAAMxE,GAAWI,EAAAA,EAAAA,IAAYN,GACvBI,GAASE,EAAAA,EAAAA,IAAYH,GACrBI,GAAWC,EAAAA,EAAAA,OAEjBmE,EAAAA,EAAAA,YAAU,WACRpE,GAASqE,EAAAA,EAAAA,MACV,GAAE,CAACrE,IAEJmC,QAAQC,IAAIzC,GAEZ,IAAM2E,EAAmBzE,EACrBF,EAASE,QAAO,qBAAGe,KACZ2D,cAAcC,SAAS3E,EAAO0E,cAAcE,OADnC,IAGhB9E,EAEJ,OACE,SAAC,KAAD,CACEO,GAAG,KACHO,WAAW,SACXiE,cAAc,OACdC,gBAAgB,UAJlB,SAMGL,EAAiBM,KAAI,YAA2B,IAAxB9D,EAAuB,EAAvBA,GAAIF,EAAmB,EAAnBA,KAAMoB,EAAa,EAAbA,OACjC,OAAO,SAAC2B,EAAD,CAAkB7C,GAAIA,EAAIF,KAAMA,EAAMoB,OAAQA,GAAhClB,EACtB,KAGN,E,6BC/Bc,SAAS+D,IACtB,OACE,UAAC,KAAD,CACE3E,GAAG,MACHyE,gBAAgB,UAChBG,EAAE,OACFC,UAAU,SACVC,EAAE,YACFhB,aAAa,OACbiB,UAAU,8CACVC,WAAW,MARb,WAUE,UAAC,IAAD,CAAMhF,GAAG,MAAMO,WAAW,SAASoD,eAAe,SAAlD,WACE,SAAC,IAAD,CACE3D,GAAG,KACHgD,MAAM,SACN/C,SAAS,OACTC,WAAW,sBACXC,WAAW,MACX8E,GAAG,OANL,wBAUA,SAAC,MAAD,CAAgBjC,MAAM,SAAS/C,SAAS,YAE1C,SAAC+B,EAAD,KACA,UAAC,IAAD,CAAMhC,GAAG,MAAMO,WAAW,SAASoD,eAAe,SAAlD,WACE,SAAC,IAAD,CACE3D,GAAG,KACHgD,MAAM,SACN/C,SAAS,OACTC,WAAW,sBACXC,WAAW,MACX8E,GAAG,OANL,uBAUA,SAAC,MAAD,CAAuBjC,MAAM,SAAS/C,SAAS,YAEjD,SAACL,EAAD,KACA,SAACqE,EAAD,MAGL,C","sources":["redux/contacts/selectors.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","components/Contact/Contact.js","components/ContactList/ContactList.js","pages/Contacts.js"],"sourcesContent":["//export const selectLoading = state => state.tasks.loading;\n\n//export const selectFilter = state => state.tasks.filter;\n\n//export const selectAllTasks = state => state.tasks.items;\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectValueFilter = state => state.contacts.filter;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { onFilter } from 'redux/contacts/slice';\nimport { selectValueFilter } from 'redux/contacts/selectors';\nimport { FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const filter = useSelector(selectValueFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <FormControl\n      as=\"div\"\n      fontSize=\"20px\"\n      fontFamily=\"Raleway, sans-serif\"\n      fontWeight=\"700\"\n    >\n      <FormLabel\n        as=\"div\"\n        htmlFor=\"filter\"\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        gap=\"4px\"\n        fontSize=\"20px\"\n        fontFamily=\"Raleway, sans-serif\"\n        fontWeight=\"700\"\n      >\n        Find contacts by name\n      </FormLabel>\n      <Input\n        as=\"input\"\n        name=\"filter\"\n        type=\"text\"\n        id=\"filter\"\n        value={filter}\n        onChange={e => dispatch(onFilter(e.currentTarget.value))}\n        placeholder=\"Contact name\"\n        borderColor=\"#0000FF\"\n        bgGradient={[\n          'linear(to-tr, teal.300, yellow.400)',\n          'linear(to-t, blue.200, teal.500)',\n          'linear(to-b, orange.100, purple.300)',\n        ]}\n        outline=\"none\"\n        w=\"256px\"\n      />\n    </FormControl>\n  );\n};\n","import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { customAlphabet } from 'nanoid';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst nanoid = customAlphabet('1234567890abcdef', 10);\n\nlet phoneRegExp =\n  /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/;\nlet nameRegExp = /[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      nameRegExp,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup\n    .string()\n    .matches(\n      phoneRegExp,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst initualValues = {\n  id: '',\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n console.log(contacts);\n\n const handleSubmit = (values, { resetForm }) => {\n    const newContact = {\n      id: 'id-' + nanoid(),\n      name: values.name,\n      number: values.number,\n    };\n\n    if (contacts.some(contact => contact.name === newContact.name)) {\n      return alert(`Contact ${newContact.name} has already been registrated.`);\n    }\n    dispatch(addContact(newContact));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initualValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormControl\n        as={Form}\n        display=\"flex\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n        gap=\"4px\"\n      >\n        <FormLabel\n          htmlFor=\"name\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          gap=\"4px\"\n          fontSize=\"20px\"\n          fontFamily=\"Raleway, sans-serif\"\n          fontWeight=\"700\"\n        >\n          Name\n          <Input\n            as={Field}\n            type=\"text\"\n            name=\"name\"\n            id=\"name\"\n            placeholder=\"Name\"\n            borderColor=\"#0000FF\"\n            bgGradient={[\n              'linear(to-tr, teal.300, yellow.400)',\n              'linear(to-t, blue.200, teal.500)',\n              'linear(to-b, orange.100, purple.300)',\n            ]}\n            w=\"256px\"\n          />\n          <FormErrorMessage\n            as={ErrorMessage}\n            color=\"#DE5D83\"\n            name=\"name\"\n            component=\"div\"\n          />\n        </FormLabel>\n        <FormLabel\n          htmlFor=\"number\"\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          gap=\"4px\"\n          fontSize=\"20px\"\n          fontFamily=\"Raleway, sans-serif\"\n          fontWeight=\"700\"\n        >\n          Number\n          <Input\n            as={Field}\n            id=\"number\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\"Phone number\"\n            borderColor=\"#0000FF\"\n            bgGradient={[\n              'linear(to-tr, teal.300, yellow.400)',\n              'linear(to-t, blue.200, teal.500)',\n              'linear(to-b, orange.100, purple.300)',\n            ]}\n            w=\"256px\"\n          />\n          <FormErrorMessage\n            as={ErrorMessage}\n            color=\"purple\"\n            name=\"number\"\n            component=\"div\"\n          />\n        </FormLabel>\n        <Button\n          as=\"button\"\n          type=\"submit\"\n          border=\"1px\"\n          borderColor=\"#0000FF\"\n          fontSize=\"20px\"\n          bgGradient={[\n            'linear(to-tr, teal.300, yellow.400)',\n            'linear(to-t, blue.200, teal.500)',\n            'linear(to-b, orange.100, purple.300)',\n          ]}\n          size=\"md\"\n          mb=\"20px\"\n          _hover={{\n            bg: 'purple.400',\n            color: 'purple.100',\n            border: '3px',\n            borderColor: '#0000FF',\n          }}\n        >\n          Add contact\n        </Button>\n      </FormControl>\n    </Formik>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  Button,\n Text\n} from '@chakra-ui/react';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  return (\n    <Text\n      as=\"li\"\n      key={id}\n      fontSize=\"30px\"\n      fontFamily=\"Raleway, sans-serif\"\n      fontWeight=\"400\"\n      mt=\"10px\"\n      display=\"flex\"\n      justifyContent=\"space-between\"\n    >\n      {name}:<Text as=\"span\">{number}</Text>\n      <Button\n        as=\"button\"\n        type=\"button\"\n        onClick={() => dispatch(deleteContact(id))}\n        border=\"1px\"\n        borderRadius=\"5px\"\n        borderColor=\"#0000FF\"\n        fontSize=\"20px\"\n        bgGradient={[\n          'linear(to-tr, teal.300, yellow.400)',\n          'linear(to-t, blue.200, teal.500)',\n          'linear(to-b, orange.100, purple.300)',\n        ]}\n        size=\"md\"\n        ml=\"5px\"\n        _hover={{\n          background: 'purple.400',\n          color: 'purple.100',\n          border: '3px',\n          borderColor: '#0000FF',\n        }}\n      >\n        Delete\n      </Button>\n    </Text>\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Contact } from 'components/Contact/Contact';\nimport { Box } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectValueFilter, selectContacts } from 'redux/contacts/selectors';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectValueFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  console.log(contacts);\n\n  const filteredContacts = filter\n    ? contacts.filter(({ name }) =>\n        name.toLowerCase().includes(filter.toLowerCase().trim())\n      )\n    : contacts;\n\n  return (\n    <Box\n      as=\"ul\"\n      alignItems=\"center\"\n      listStyleType=\"none\"\n      backgroundColor=\"#B0E0E6\"\n    >\n      {filteredContacts.map(({ id, name, number }) => {\n        return <Contact key={id} id={id} name={name} number={number} />;\n      })}\n    </Box>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { Filter } from 'components/Filter';\nimport { ContactForm } from 'components/ContactForm';\nimport { ContactList } from 'components/ContactList';\nimport { AiOutlineApple } from 'react-icons/ai';\nimport { AiOutlineUsergroupAdd } from 'react-icons/ai';\nimport { Box, Flex, Heading } from '@chakra-ui/react';\n\nexport default function Contacts() {\n  return (\n    <Box\n      as=\"div\"\n      backgroundColor=\"#B0E0E6\"\n      p=\"16px\"\n      textAlign=\"center\"\n      m=\"10px auto\"\n      borderRadius=\"10px\"\n      boxShadow=\"24px 20px 31px 0px rgba(242, 120, 147, 0.2)\"\n      lineHeight=\"1.8\"\n    >\n      <Flex as=\"div\" alignItems=\"center\" justifyContent=\"center\">\n        <Heading\n          as=\"h1\"\n          color=\"purple\"\n          fontSize=\"24px\"\n          fontFamily=\"Raleway, sans-serif\"\n          fontWeight=\"400\"\n          mr=\"15px\"\n        >\n          Phonebook\n        </Heading>\n        <AiOutlineApple color=\"purple\" fontSize=\"3em\" />\n      </Flex>\n      <ContactForm />\n      <Flex as=\"div\" alignItems=\"center\" justifyContent=\"center\">\n        <Heading\n          as=\"h2\"\n          color=\"purple\"\n          fontSize=\"24px\"\n          fontFamily=\"Raleway, sans-serif\"\n          fontWeight=\"400\"\n          mr=\"15px\"\n        >\n          Contacts\n        </Heading>\n        <AiOutlineUsergroupAdd color=\"purple\" fontSize=\"3em\" />\n      </Flex>\n      <Filter />\n      <ContactList />\n    </Box>\n  );\n}\n"],"names":["selectContacts","state","contacts","selectValueFilter","filter","Filter","useSelector","dispatch","useDispatch","as","fontSize","fontFamily","fontWeight","htmlFor","display","flexDirection","alignItems","gap","I","name","type","id","value","onChange","e","onFilter","currentTarget","placeholder","borderColor","bgGradient","outline","w","nanoid","customAlphabet","schema","yup","shape","matches","required","number","initualValues","ContactForm","console","log","initialValues","validationSchema","onSubmit","values","resetForm","newContact","some","contact","alert","addContact","Form","Field","ErrorMessage","color","component","pattern","title","border","size","mb","_hover","bg","Contact","mt","justifyContent","onClick","deleteContact","borderRadius","ml","background","ContactList","useEffect","fetchContacts","filteredContacts","toLowerCase","includes","trim","listStyleType","backgroundColor","map","Contacts","p","textAlign","m","boxShadow","lineHeight","mr"],"sourceRoot":""}